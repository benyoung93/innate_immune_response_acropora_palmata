#       label = 'Elbow method', vjust = -1, size = 4))
# Shows the main ASV weights driving the variance
biplot(
allsamps,
colby = "TREATMENT",
hline = 0,
vline = 0,
legendPosition = 'right',
labSize = 2,
pointSize = 2,
legendLabSize = 6,
legendTitleSize = 10,
axisLabSize = 10
)
## Plotting of a large number of PCs
#pairsplot(allsamps)
## Plot showing the samples with the strongest loadings of ASVs for each axes identyfying ones which are driving the variance
#plotloadings(allsamps, labSize = 3)
# Plotting of the metadata to the PC axes to see which one has strong significant relationships with axes.
eigencorplot(
allsamps,
components = getComponents(allsamps, 1:10),
metavars = c("treatment", "COLONY", "tank", "bw", "chemD", "chemN",
"mech"),
col = c('darkblue', 'blue2', 'black', 'red2', 'darkred'),
cexCorval = 0.7,
colCorval = 'white',
fontCorval = 2,
posLab = 'bottomleft',
rotLabX = 45,
posColKey = 'top',
cexLabColKey = 1.5,
scale = TRUE,
main = 'PC1 - 11, Metadata Correlations',
colFrame = 'white',
plotRsquared = FALSE
)
eigencorplot(
allsamps,
components = getComponents(allsamps, 1:11),
metavars = c("treatment", "COLONY", "tank", "bw", "chemD", "chemN",
"mech"),
col = c('white', 'cornsilk1', 'gold', 'forestgreen', 'darkgreen'),
cexCorval = 1.2,
fontCorval = 2,
posLab = 'all',
rotLabX = 45,
scale = TRUE,
main = bquote(
Principal ~ Component ~ Pearson ~ r ^ 2 ~ metadata ~ significant ~ correlation
),
plotRsquared = T,
corFUN = 'pearson',
corUSE = 'pairwise.complete.obs',
corMultipleTestCorrection = 'BH',
signifSymbols = c('****', '***', '**', '*', ''),
signifCutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1)
)
eigencorplot(
allsamps,
components = getComponents(allsamps, 1:11),
metavars = c("treatment", "COLONY"),
col = c('white', 'cornsilk1', 'gold', 'forestgreen', 'darkgreen'),
cexCorval = 2,
fontCorval = 2,
posLab = 'all',
rotLabX = 45,
scale = TRUE,
main = bquote(
Principal ~ Component ~ Pearson ~ r ^ 2 ~ metadata ~ significant ~ correlation
),
plotRsquared = T,
corFUN = 'pearson',
corUSE = 'pairwise.complete.obs',
corMultipleTestCorrection = 'BH',
signifSymbols = c('****', '***', '**', '*', ''),
signifCutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1)
)
clione_PCA_cor_mat <- eigencorplot(
allsamps,
components = getComponents(allsamps, 1:11),
metavars = c("treatment", "COLONY"),
col = c('white', 'cornsilk1', 'gold', 'forestgreen', 'darkgreen'),
cexCorval = 2,
fontCorval = 2,
posLab = 'all',
rotLabX = 45,
scale = TRUE,
main = bquote(
Principal ~ Component ~ Pearson ~ r ^ 2 ~ metadata ~ significant ~ correlation
),
plotRsquared = T,
corFUN = 'pearson',
corUSE = 'pairwise.complete.obs',
corMultipleTestCorrection = 'BH',
signifSymbols = c('****', '***', '**', '*', ''),
signifCutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1)
)
clione_PCA_cor_mat
dev.print(pdf,"~/Dropbox/PhD/people/john/clione/saved_figures/clione_PCA_cor_mat")
## not transposing the CLR for the PCA
pca_samp <- prcomp(t(PCA_tools_all)[,select])
sample_loadings <- as.data.frame(pca_samp$x)
#View(sample_loadings)
## Summary of the PCA analysis
#biplot(pca_samp, cex=c(0.6,0.4), var.axes=F,scale=1, xlab=xlab, ylab=ylab)
summary(pca_samp)
#fviz_eig(pca_samp, addlabels = TRUE, ylim = c(0, 100), )
plotPCA(vsdall, intgroup=c("treatment"), returnData = F)
pcaaxes23(vsdall, intgroup=c("treatment"), returnData = F)
pcaaxes34(vsdall, intgroup=c("treatment"), returnData = F)
pcaaxes45(vsdall, intgroup=c("treatment"), returnData = F)
plotPCA(vsdall, intgroup=c("colony"), returnData = F)
pcaaxes23(vsdall, intgroup=c("colony"), returnData = F)
pcaaxes34(vsdall, intgroup=c("colony"), returnData = F)
pcaaxes45(vsdall, intgroup=c("colony"), returnData = F)
plotPCA(vsdall, intgroup=c("tank"), returnData = F)
pcaaxes23(vsdall, intgroup=c("tank"), returnData = F)
pcaaxes34(vsdall, intgroup=c("tank"), returnData = F)
pcaaxes45(vsdall, intgroup=c("tank"), returnData = F)
plotPCA(vsdall, intgroup=c("bw"), returnData = F)
pcaaxes23(vsdall, intgroup=c("bw"), returnData = F)
pcaaxes34(vsdall, intgroup=c("bw"), returnData = F)
pcaaxes45(vsdall, intgroup=c("bw"), returnData = F)
plotPCA(vsdall, intgroup=c("chemD"), returnData = F)
pcaaxes23(vsdall, intgroup=c("chemD"), returnData = F)
pcaaxes34(vsdall, intgroup=c("chemD"), returnData = F)
pcaaxes45(vsdall, intgroup=c("chemD"), returnData = F)
plotPCA(vsdall, intgroup=c("chemN"), returnData = F)
pcaaxes23(vsdall, intgroup=c("chemN"), returnData = F)
pcaaxes34(vsdall, intgroup=c("chemN"), returnData = F)
pcaaxes45(vsdall, intgroup=c("chemN"), returnData = F)
plotPCA(vsdall, intgroup=c("mech"), returnData = F)
pcaaxes23(vsdall, intgroup=c("mech"), returnData = F)
pcaaxes34(vsdall, intgroup=c("mech"), returnData = F)
pcaaxes45(vsdall, intgroup=c("mech"), returnData = F)
plotPCA(vsdall, intgroup=c("FvFm"), returnData = F)
pcaaxes23(vsdall, intgroup=c("FvFm"), returnData = F)
pcaaxes34(vsdall, intgroup=c("FvFm"), returnData = F)
pcaaxes45(vsdall, intgroup=c("FvFm"), returnData = F)
pca12 <- plotPCA(vsdall, intgroup=c("TREATMENT", "COLONY", "tank", "bw", "chemD", "chemN",
"mech", "FvFm"), returnData = TRUE)
pca23 <- pcaaxes23(vsdall, intgroup=c("TREATMENT", "COLONY", "tank", "bw", "chemD", "chemN",
"mech", "FvFm"), returnData = TRUE)
pca34 <- pcaaxes34(vsdall, intgroup=c("TREATMENT", "COLONY", "tank", "bw", "chemD", "chemN",
"mech", "FvFm"), returnData = TRUE)
pca45 <- pcaaxes45(vsdall, intgroup=c("TREATMENT", "COLONY", "tank", "bw", "chemD", "chemN",
"mech", "FvFm"), returnData = TRUE)
ggplot(pca12, aes(PC1, PC2, color = COLONY, shape = TREATMENT)) +
geom_point(size = 3) +
xlab(paste0("PC1 69% variance")) +
ylab(paste0("PC2 11% variance")) +
theme(
text = element_text(size = 11, family = "Arial"),
legend.position = "right",
panel.background = element_rect(fill = "transparent"),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent"),
axis.text = element_text(size = 8)
)  +
theme(legend.key.size = unit(0.7, "cm")) +
#  geom_polygon(fill = "NA") +
scale_color_manual(values = c("sienna3", "black", "darkgrey")) +
stat_ellipse(aes(PC1, PC2, group = COLONY), type = "norm")
ggplot(pca23, aes(PC2, PC3, color = COLONY, shape = TREATMENT)) +
geom_point(size=3) +
xlab(paste0("PC2 11% variance")) +
ylab(paste0("PC3 7% variance")) +
theme(text = element_text(size=11, family = "Arial"),
legend.position = "right",
panel.background = element_rect(fill = "transparent"),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent"),
axis.text = element_text(size = 8)) +
geom_polygon(fill = "NA")
ggplot(pca34, aes(PC3, PC4, color = COLONY, shape = TREATMENT)) +
geom_point(size=3) +
xlab(paste0("PC3 7% variance")) +
ylab(paste0("PC4 4% variance")) +
theme(text = element_text(size=11, family = "Arial"),
legend.position = "right",
panel.background = element_rect(fill = "transparent"),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent"),
axis.text = element_text(size = 8)) +
geom_polygon(fill = "NA")
ggplot(pca45, aes(PC4, PC5, color = COLONY, shape = TREATMENT)) +
geom_point(size=3) +
xlab(paste0("PC4 4% variance")) +
ylab(paste0("PC5 2% variance")) +
theme(text = element_text(size=11, family = "Arial"),
legend.position = "right",
panel.background = element_rect(fill = "transparent"),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent"),
axis.text = element_text(size = 8)) +
geom_polygon(fill = "NA")
clione_pc1_pc2_genet <-
ggplot(pca12, aes(PC1, PC2, color = COLONY, shape = TREATMENT)) +
geom_point(size = 3) +
xlab(paste0("PC1 69% variance")) +
ylab(paste0("PC2 11% variance")) +
theme(
text = element_text(size = 11),
legend.position = "right",
panel.background = element_rect(fill = "transparent"),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent"),
axis.text = element_text(size = 8)
)  +
theme(legend.key.size = unit(0.7, "cm")) +
#  geom_polygon(fill = "NA") +
scale_color_manual(values = c("sienna3", "black", "darkgrey")) +
stat_ellipse(aes(PC1, PC2, group = COLONY), type = "norm")
clione_pc1_pc2_genet
dev.print(pdf,"~/Dropbox/PhD/people/john/clione/saved_figures/clione_pc1_pc2_genet")
vsdgenet <- vst(ddsall)
assay(vsdgenet) <- limma::removeBatchEffect(assay(vsdgenet), vsdgenet$COLONY)
PCA_tools_all <- assay(vsdgenet)
rv <- rowVars(PCA_tools_all)
select <- order(rv, decreasing = TRUE)[seq_len(min(500, length(rv)))]
allsamps <- pca(PCA_tools_all[select,], metadata = tfall, removeVar = 0.10)
## Scree plot showing amount of variance explained by each PC (bars) and cumulative variance as you progress along bars (line)
screeplot(allsamps,
getComponents(allsamps, 1:15),
axisLabSize = 10,
titleLabSize = 10,
returnPlot = T,
ylim = c(0,90),
vline = c(findElbowPoint(allsamps$variance))) +
geom_label(aes(x = findElbowPoint(allsamps$variance) + 1, y = 25,
label = 'Elbow method', vjust = -1, size = 4))
# Shows the main ASV weights driving the variance
# biplot(
#   allsamps,
#   colby = "treatment",
#   hline = 0,
#   vline = 0,
#   legendPosition = 'right',
#   labSize = 2,
#   pointSize = 2,
#   legendLabSize = 6,
#   legendTitleSize = 10,
#   axisLabSize = 10
# )
## Plotting of a large number of PCs
#pairsplot(allsamps)
## Plot showing the samples with the strongest loadings of ASVs for each axes identyfying ones which are driving the variance
#plotloadings(allsamps, labSize = 3)
# Plotting of the metadata to the PC axes to see which one has strong significant relationships with axes.
eigencorplot(
allsamps,
components = getComponents(allsamps, 1:10),
metavars = c("TREATMENT", "COLONY", "tank", "bw", "chemD", "chemN",
"mech"),
col = c('darkblue', 'blue2', 'black', 'red2', 'darkred'),
cexCorval = 0.7,
colCorval = 'white',
fontCorval = 2,
posLab = 'bottomleft',
rotLabX = 45,
posColKey = 'top',
cexLabColKey = 1.5,
scale = TRUE,
main = 'PC1 - 11, Metadata Correlations',
colFrame = 'white',
plotRsquared = FALSE
)
eigencorplot(
allsamps,
components = getComponents(allsamps, 1:11),
metavars = c("TREATMENT", "COLONY", "tank", "bw", "chemD", "chemN",
"mech"),
col = c('white', 'cornsilk1', 'gold', 'forestgreen', 'darkgreen'),
cexCorval = 1.2,
fontCorval = 2,
posLab = 'all',
rotLabX = 45,
scale = TRUE,
main = bquote(
Principal ~ Component ~ Pearson ~ r ^ 2 ~ metadata ~ significant ~ correlation
),
plotRsquared = T,
corFUN = 'pearson',
corUSE = 'pairwise.complete.obs',
corMultipleTestCorrection = 'BH',
signifSymbols = c('****', '***', '**', '*', ''),
signifCutpoints = c(0, 0.0001, 0.001, 0.01, 0.05, 1)
)
## not transposing the CLR for the PCA
pca_samp <- prcomp(t(PCA_tools_all)[,select])
sample_loadings <- as.data.frame(pca_samp$x)
#View(sample_loadings)
## Summary of the PCA analysis
#biplot(pca_samp, cex=c(0.6,0.4), var.axes=F,scale=1, xlab=xlab, ylab=ylab)
summary(pca_samp)
#fviz_eig(pca_samp, addlabels = TRUE, ylim = c(0, 100), )
plotPCA(vsdgenet, intgroup=c("TREATMENT"), returnData = F)
pcaaxes23(vsdgenet, intgroup=c("TREATMENT"), returnData = F)
pcaaxes34(vsdgenet, intgroup=c("TREATMENT"), returnData = F)
pcaaxes45(vsdgenet, intgroup=c("TREATMENT"), returnData = F)
plotPCA(vsdgenet, intgroup=c("tank"), returnData = F)
pcaaxes23(vsdgenet, intgroup=c("tank"), returnData = F)
pcaaxes34(vsdgenet, intgroup=c("tank"), returnData = F)
pcaaxes45(vsdgenet, intgroup=c("tank"), returnData = F)
plotPCA(vsdgenet, intgroup=c("FvFm"), returnData = F)
pcaaxes23(vsdgenet, intgroup=c("FvFm"), returnData = F)
pcaaxes34(vsdgenet, intgroup=c("FvFm"), returnData = F)
pcaaxes45(vsdgenet, intgroup=c("FvFm"), returnData = F)
plotPCA(vsdgenet, intgroup=c("mech"), returnData = F)
pcaaxes23(vsdgenet, intgroup=c("mech"), returnData = F)
pcaaxes34(vsdgenet, intgroup=c("mech"), returnData = F)
pcaaxes45(vsdgenet, intgroup=c("mech"), returnData = F)
plotPCA(vsdgenet, intgroup=c("chemD"), returnData = F)
pcaaxes23(vsdgenet, intgroup=c("chemD"), returnData = F)
pcaaxes34(vsdgenet, intgroup=c("chemD"), returnData = F)
pcaaxes45(vsdgenet, intgroup=c("chemD"), returnData = F)
plotPCA(vsdgenet, intgroup=c("chemN"), returnData = F)
pcaaxes23(vsdgenet, intgroup=c("chemN"), returnData = F)
pcaaxes34(vsdgenet, intgroup=c("chemN"), returnData = F)
pcaaxes45(vsdgenet, intgroup=c("chemN"), returnData = F)
plotPCA(vsdgenet, intgroup=c("bw"), returnData = F)
pcaaxes23(vsdgenet, intgroup=c("bw"), returnData = F)
pcaaxes34(vsdgenet, intgroup=c("bw"), returnData = F)
pcaaxes45(vsdgenet, intgroup=c("bw"), returnData = F)
pca12 <- plotPCA(vsdgenet, intgroup=c("TREATMENT", "COLONY", "tank", "bw", "chemD", "chemN",
"mech", "FvFm"), returnData = TRUE)
pca23 <- pcaaxes23(vsdgenet, intgroup=c("TREATMENT", "COLONY", "tank", "bw", "chemD", "chemN",
"mech", "FvFm"), returnData = TRUE)
pca34 <- pcaaxes34(vsdgenet, intgroup=c("TREATMENT", "COLONY", "tank", "bw", "chemD", "chemN",
"mech", "FvFm"), returnData = TRUE)
pca45 <- pcaaxes45(vsdgenet, intgroup=c("TREATMENT", "COLONY", "tank", "bw", "chemD", "chemN",
"mech", "FvFm"), returnData = TRUE)
ggplot(pca12, aes(PC1, PC2, color = TREATMENT)) +
geom_point(size = 3) +
xlab(paste0("PC1 30% variance")) +
ylab(paste0("PC2 22% variance")) +
theme(
text = element_text(size = 11, family = "Arial"),
legend.position = "right",
panel.background = element_rect(fill = "transparent"),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent"),
axis.text = element_text(size = 8)
)  +
theme(legend.key.size = unit(0.7, "cm")) +
stat_ellipse()
ggplot(pca23, aes(PC2, PC3, color = TREATMENT)) +
geom_point(size=3) +
xlab(paste0("PC2 22% variance")) +
ylab(paste0("PC3 10% variance")) +
theme(text = element_text(size=11, family = "Arial"),
legend.position = "right",
panel.background = element_rect(fill = "transparent"),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent"),
axis.text = element_text(size = 8)) +
stat_ellipse()
ggplot(pca34, aes(PC3, PC4, color = TREATMENT)) +
geom_point(size=3) +
xlab(paste0("PC3 10% variance")) +
ylab(paste0("PC4 7% variance")) +
theme(text = element_text(size=11, family = "Arial"),
legend.position = "right",
panel.background = element_rect(fill = "transparent"),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent"),
axis.text = element_text(size = 8)) +
stat_ellipse()
ggplot(pca45, aes(PC4, PC5, color = TREATMENT)) +
geom_point(size=3) +
xlab(paste0("PC4 7% variance")) +
ylab(paste0("PC5 6% variance")) +
theme(text = element_text(size=11, family = "Arial"),
legend.position = "right",
panel.background = element_rect(fill = "transparent"),
axis.line = element_line(colour = "black"),
legend.key = element_rect(fill = "transparent"),
axis.text = element_text(size = 8)) +
stat_ellipse()
ddslrt <- DESeqDataSetFromMatrix(countData = cccall,
colData = tfall,
design = ~ COLONY)
ddslrt <- DESeq(ddslrt, test="LRT", reduced = ~ 1)
lrt_results <- results(ddslrt,
alpha = 0.001)
summary(lrt_results)
as.data.frame(lrt_results) %>%
na.exclude() %>%
dplyr::filter(padj <= 0.001)-> LRT_geno_0.001
LRT_geno_0.001
# write.csv(LRT_geno_0.001,
#           file = "~/Dropbox/PhD/Projects/DHE/NGS/tagseq/dissertation_files/raw_lists/LRT_geno_0.001.csv")
# LRT_geno_0.01 %>%
#   rownames() -> filt_lrt
resultsNames(ddslrt)
B_C_res <- results(ddslrt,
alpha = 0.001,
test = "Wald",
contrast = c("COLONY", "B", "C"))
C_D_res <- results(ddslrt,
alpha = 0.001,
test = "Wald",
contrast = c("COLONY", "C", "D"))
B_D_res <- results(ddslrt,
alpha = 0.001,
test = "Wald",
contrast = c("COLONY", "B", "D"))
summary(B_C_res)
as.data.frame(B_C_res) %>%
na.exclude() %>%
filter(padj < 0.001) %>%
mutate(DeSeq_contrast = "b_vs_c") -> B_C_res_0.01
summary(C_D_res)
as.data.frame(C_D_res) %>%
na.exclude() %>%
filter(padj < 0.001) %>%
mutate(DeSeq_contrast = "c_vs_d") -> C_D_res_0.01
summary(B_D_res)
as.data.frame(B_D_res) %>%
na.exclude() %>%
filter(padj < 0.001) %>%
mutate(DeSeq_contrast = "b_vs_d") -> B_D_res_0.01
venn(list(rownames(C_D_res_0.01), rownames(B_C_res_0.01), rownames(B_D_res_0.01)))
clione_genet_venn <-
venn(list(
rownames(C_D_res_0.01),
rownames(B_C_res_0.01),
rownames(B_D_res_0.01)
))
clione_genet_venn
dev.print(pdf,"~/Dropbox/PhD/people/john/clione/saved_figures/clione_genet_venn")
summary(lrt_results)
as.data.frame(lrt_results) %>%
na.exclude() %>%
dplyr::filter(padj < 0.0001) -> LRT_0.01
LRT_0.01 %>%
rownames() -> filt_lrt
# View(filt_lrt)
# assay(vsdall) %>%
#  as.data.frame() %>%
#  rownames_to_column(var = "genes") %>%
#  dplyr::filter(genes %in% filt_lrt) %>%
#  column_to_rownames(var = "genes") -> ma
#
# design <- as.data.frame(colData(ddslrt))
#
# res_norm <- degPatterns(ma, tfall, time = "COLONY", reduce = T)
# res_norm_scale <- degPatterns(ma, tfall, time = "COLONY", reduce = T, scale = T)
#
# save(res_norm,
#     file = "~/Dropbox/PhD/people/john/clione/DEG_Report_redT.RData")
# save(res_norm_scale,
#     file = "~/Dropbox/PhD/people/john/clione//DEG_Report_redT_scaleT.RData")
load("~/Dropbox/PhD/people/john/clione/DEG_Report_redT.RData")
load("~/Dropbox/PhD/people/john/clione//DEG_Report_redT_scaleT.RData")
degPlotCluster(res_norm$normalized, time = "colony", points = F) + theme_bw()
degPlotCluster(res_norm_scale$normalized, time = "colony", points = F) + theme_bw()
ggplot(res_norm$normalized, aes(x=COLONY, y=value, color = COLONY)) +
geom_boxplot(outlier.size = 0, outlier.shape = NA) +
stat_smooth(aes(x = COLONY, y = value,
group = COLONY, color = COLONY), se = FALSE, method = "lm",
formula = y ~ poly(x, splan)) +
geom_line(data = res_norm$normalized %>%
group_by(COLONY, cluster) %>%
summarise(average = mean(value)) %>%
ungroup(),
mapping = aes(x=COLONY, y = average, colour = COLONY),
color = "black") +
geom_line(data = res_norm$normalized %>%
group_by(COLONY, cluster) %>%
summarise(average = mean(value)) %>%
ungroup(),
mapping = aes(x=COLONY, y = average, group = 0)) +
facet_wrap(~cluster) +
theme_bw()
res_norm_scale$df %>%
filter(cluster %in% c("1")) %>%
write.csv(., file = "/Users/benyoung/Dropbox/PhD/people/john/plampa/clupro_results/LRT_clus1.csv")
res_norm_scale$df %>%
filter(cluster %in% c("2")) %>%
write.csv(., file = "/Users/benyoung/Dropbox/PhD/people/john/plampa/clupro_results/LRT_clus2.csv")
res_norm_scale$df %>%
filter(cluster %in% c("3")) %>%
write.csv(., file = "/Users/benyoung/Dropbox/PhD/people/john/plampa/clupro_results/LRT_clus3.csv")
res_norm_scale$df %>%
filter(cluster %in% c("4")) %>%
write.csv(., file = "/Users/benyoung/Dropbox/PhD/people/john/plampa/clupro_results/LRT_clus4.csv")
dds_OA <- DESeqDataSetFromMatrix(countData = cccall,
colData = tfall,
design = ~ colony + treatment)
dds_OA <- DESeq(dds_OA, test="Wald")
resultsNames(dds_OA)
OA_versus_AMB <- results(dds_OA,
contrast = c("treatment", "OA", "AM"),
alpha = 0.05,
test = "Wald")
summary(OA_versus_AMB)
as.data.frame(OA_versus_AMB) %>%
dplyr::filter(padj < 0.05) -> OA_versus_AMB_res_0.05
View(OA_versus_AMB_res_0.05)
View(clione_sequence_to_gene)
clione_sequence_to_gene %>%
dplyr::filter(GeneID %in% rownames(OA_versus_AMB_res_0.05)) %>%
dplyr::select(GeneID, sequence) -> df_4_blast_OA
OA_versus_AMB_res_0.05 %>%
rownames_to_column(var = "GeneID") %>%
inner_join(clione_annot %>% dplyr::select(-FastaID) %>% unique()) %>% View()
OA_versus_AMB_res_0.05 %>%
rownames_to_column(var = "GeneID") %>%
inner_join(clione_annot %>% dplyr::select(-FastaID) %>% unique()) %>%
write.csv(., file = "~/Dropbox/NOAA_postdoc/projects/sponge_OA_transcriptomics/clione/r_generated_files/clione_OA_DE_results.csv")
